---
layout: post
title:  "Xilinx tools and Git: Vivado"
date:   2022-12-21 14:22:39 +0300
author:
  name: "Viktor Prutyanov"
  url: "https://github.com/viktor-prutyanov"
---

In [the previous post](https://daynix.github.io/2022/12/07/Xilinx-tools-and-Git-Vitis-HLS.html) we reviewed in detail how to adapt the Xilinx Vitis HLS project to Git workflow. This article describes how to achieve the same goal with Xilinx Vivado.

## Simple project with Verilog/VHDL only

Let’s start with a freshly created Vivado project with two Verilog source files:

![image](https://user-images.githubusercontent.com/8286747/208871546-632390c9-a3a3-4fa8-a824-d44d871496bf.png)

If we look at files generated by Vivado we will find some incomprehensible things:

![image](https://user-images.githubusercontent.com/8286747/208871758-d5280269-dcfc-49ca-8751-06f2010ee20e.png)

In general, `example.xpr` is the actual project file. But a closer look reveals the same situation as in the case of Vitis HLS.
There is a lot of data that will definitely be changed across different PCs, Vivado versions and just over time:

![image](https://user-images.githubusercontent.com/8286747/208871915-0fd666b9-541d-40fb-b6fe-1dd21abdff9e.png)

It makes us find universal methods of project saving and loading again as we did it with Vitis HLS. And Tcl scripting integrated into Xilinx tools will also help us this time.

### Running Tcl in Vivado

There are several ways to run Tcl scripts and commands in Xilinx Vivado. One of them is to pass a script name as command-line argument to Vivado:

```shell
vivado -source script.tcl
```

Separate commands can be run through Vivado Tcl Console. Also, Tcl Console can execute the script line-by-line:

```shell
source script.tcl
```

### Saving the project

Fortunately, Vivado already has a way to save the project as a Tcl script:

```shell
write_project_tcl -no_copy_sources example.tcl
```

After executing this command in the Tcl Console, Vivado produces a file named `example.tcl` in the current directory:

![unnamed](https://user-images.githubusercontent.com/8286747/208872868-c2660502-3f67-47c0-96f2-f2acfecfdea5.png)

Let’s examine it a bit. The most noticeable feature is that source file search is made relative to the current directory and no absolute paths are mentioned (except list of remote sources in header comment):

![image](https://user-images.githubusercontent.com/8286747/208874752-59d4b16a-9646-4043-8549-e943d01148a3.png)

This Tcl script should be stored in the Git repository along with source code files. It is enough to recreate the project. Other files generated by Vivado can be deleted.

![unnamed](https://user-images.githubusercontent.com/8286747/208873146-94817733-91ac-4983-bd14-e1d5367cfdf4.png)

In fact, it’s better to run write_project_tcl in the following form:
```shell
write_project_tcl -no_copy_sources -force [current_project].tcl
```

The `-force` key allows us to overwrite the existing Tcl script. Using the `current_project` command gives us the current Vivado project name automatically.

Also, the project Tcl script can be cleaned up from commented artifacts pointing to current PC:

```shell
set pathToRemove [file dirname [file normalize [file dirname .]]]

set f [open [current_project].tcl "r"]
set cleanScript [regsub -all $pathToRemove [read $f] ".."]
close $f

set f [open [current_project].tcl "w"]
puts -nonewline $f $cleanScript
close $f
```

### Loading the project

To restore our project from the Tcl script, we can do the following:

```shell
vivado -source example.tcl
```

Or in GUI: _Tools > Run Tcl script… > Select "example.tcl" > OK_.

Vivado will recreate our project from scratch and we can continue to work on it.

## Project with Block Design

Sometimes we have to use Block Design in a Vivado project. So, let’s create a piece of Block Design in our example project.

We must specify the BD directory explicitly and not select the “Local to Project” option:

![unnamed](https://user-images.githubusercontent.com/8286747/208875368-9d3ca19e-4d7e-4619-a774-b9bc64634770.png)

![unnamed](https://user-images.githubusercontent.com/8286747/208875403-de4769d2-4bc7-4e60-a397-30b29caac03c.png)

To write this project as a Tcl script we should add `-use_bd_files` option:

```shell
write_project_tcl -no_copy_sources -use_bd_files -force [current_project].tcl
```

This option means that Vivado will use BD files directly instead of writing Tcl code to the script for recreation of such designs from scratch. If BDs are nested or just too complex, Vivado may fail during running such Tcl code, so it’s easier to store them as separate files.

After a closer look at the script, it turns out that `design_1.bd` and corresponding HDL wrapper are added to the project:

![unnamed](https://user-images.githubusercontent.com/8286747/208875429-9fc729ac-646a-4089-8726-2fb71f3b8b79.png)

Thus, we should add them to our Git repository. These are all the files required to recreate the project:

![unnamed](https://user-images.githubusercontent.com/8286747/208875491-380b5441-f2d4-47ba-8571-783497ea569a.png)

## Project with Block Design and custom HLS IP

Another popular case for consideration is the presence of a custom Vitis HLS IP in the Vivado project.

Suppose we have a directory named `ips` added to the project as an IP Repository:

![unnamed](https://user-images.githubusercontent.com/8286747/208894590-5300601d-3655-42b9-97c9-f5ed9183359c.png)

Vitis HLS IP is added to the `design_1` Block Design:

![unnamed](https://user-images.githubusercontent.com/8286747/208894695-40ef26f8-202c-4394-8664-3323423a45fe.png)

![unnamed](https://user-images.githubusercontent.com/8286747/208894650-cf37aae3-1c8e-4de2-9086-b8c855bd6a05.png)

The project is written to a Tcl script in exactly the same way:

```shell
write_project_tcl -no_copy_sources -use_bd_files -force [current_project].tcl
```

Inspection of `example.tcl` shows that `ips` directory is added to the project in a relative manner as an IP repository:

![unnamed](https://user-images.githubusercontent.com/8286747/208894616-83725e1e-4cbe-4f93-b0a8-5c10c6b016b1.png)

So, the full set of files for the project looks like the following:

![unnamed](https://user-images.githubusercontent.com/8286747/208894727-e6191e11-e8d8-4888-bf19-e649677a3f85.png)

The `empty.txt` file exists to preserve the `ips` directory in the repository, because Git can’t store empty folders.

Project can be fully recreated in the following way:

1. Build and export Vitis HLS IP to ZIP file with `export.tcl`
2. Uncompress ZIP file to `ips`
3. Recreate Vivado project with `example.tcl`

Step 1 was discussed in the ["Xilinx Vitis HLS and Git"](https://daynix.github.io/2022/12/07/Xilinx-tools-and-Git-Vitis-HLS.html) article.

## Conclusion

We have discussed how Tcl scripting helps to save and load Vivado projects with and without Block Designs and HLS IPs to the Git repository. Of course, Vivado has a lot more scripting options, but only several commands are needed to work with Git.
